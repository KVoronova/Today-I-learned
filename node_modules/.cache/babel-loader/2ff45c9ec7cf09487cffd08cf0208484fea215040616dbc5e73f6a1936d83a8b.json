{"ast":null,"code":"import { assertNotStrictEqual } from './typings/common-types.js';\nimport { isPromise } from './utils/is-promise.js';\nimport { applyMiddleware, commandMiddlewareFactory } from './middleware.js';\nimport { parseCommand } from './parse-command.js';\nimport { isYargsInstance } from './yargs-factory.js';\nimport { maybeAsyncResult } from './utils/maybe-async-result.js';\nimport whichModule from './utils/which-module.js';\nconst DEFAULT_MARKER = /(^\\*)|(^\\$0)/;\nexport class CommandInstance {\n  constructor(usage, validation, globalMiddleware, shim) {\n    this.requireCache = new Set();\n    this.handlers = {};\n    this.aliasMap = {};\n    this.frozens = [];\n    this.shim = shim;\n    this.usage = usage;\n    this.globalMiddleware = globalMiddleware;\n    this.validation = validation;\n  }\n  addDirectory(dir, req, callerFile, opts) {\n    opts = opts || {};\n    if (typeof opts.recurse !== 'boolean') opts.recurse = false;\n    if (!Array.isArray(opts.extensions)) opts.extensions = ['js'];\n    const parentVisit = typeof opts.visit === 'function' ? opts.visit : o => o;\n    opts.visit = (obj, joined, filename) => {\n      const visited = parentVisit(obj, joined, filename);\n      if (visited) {\n        if (this.requireCache.has(joined)) return visited;else this.requireCache.add(joined);\n        this.addHandler(visited);\n      }\n      return visited;\n    };\n    this.shim.requireDirectory({\n      require: req,\n      filename: callerFile\n    }, dir, opts);\n  }\n  addHandler(cmd, description, builder, handler, commandMiddleware, deprecated) {\n    let aliases = [];\n    const middlewares = commandMiddlewareFactory(commandMiddleware);\n    handler = handler || (() => {});\n    if (Array.isArray(cmd)) {\n      if (isCommandAndAliases(cmd)) {\n        [cmd, ...aliases] = cmd;\n      } else {\n        for (const command of cmd) {\n          this.addHandler(command);\n        }\n      }\n    } else if (isCommandHandlerDefinition(cmd)) {\n      let command = Array.isArray(cmd.command) || typeof cmd.command === 'string' ? cmd.command : this.moduleName(cmd);\n      if (cmd.aliases) command = [].concat(command).concat(cmd.aliases);\n      this.addHandler(command, this.extractDesc(cmd), cmd.builder, cmd.handler, cmd.middlewares, cmd.deprecated);\n      return;\n    } else if (isCommandBuilderDefinition(builder)) {\n      this.addHandler([cmd].concat(aliases), description, builder.builder, builder.handler, builder.middlewares, builder.deprecated);\n      return;\n    }\n    if (typeof cmd === 'string') {\n      const parsedCommand = parseCommand(cmd);\n      aliases = aliases.map(alias => parseCommand(alias).cmd);\n      let isDefault = false;\n      const parsedAliases = [parsedCommand.cmd].concat(aliases).filter(c => {\n        if (DEFAULT_MARKER.test(c)) {\n          isDefault = true;\n          return false;\n        }\n        return true;\n      });\n      if (parsedAliases.length === 0 && isDefault) parsedAliases.push('$0');\n      if (isDefault) {\n        parsedCommand.cmd = parsedAliases[0];\n        aliases = parsedAliases.slice(1);\n        cmd = cmd.replace(DEFAULT_MARKER, parsedCommand.cmd);\n      }\n      aliases.forEach(alias => {\n        this.aliasMap[alias] = parsedCommand.cmd;\n      });\n      if (description !== false) {\n        this.usage.command(cmd, description, isDefault, aliases, deprecated);\n      }\n      this.handlers[parsedCommand.cmd] = {\n        original: cmd,\n        description,\n        handler,\n        builder: builder || {},\n        middlewares,\n        deprecated,\n        demanded: parsedCommand.demanded,\n        optional: parsedCommand.optional\n      };\n      if (isDefault) this.defaultCommand = this.handlers[parsedCommand.cmd];\n    }\n  }\n  getCommandHandlers() {\n    return this.handlers;\n  }\n  getCommands() {\n    return Object.keys(this.handlers).concat(Object.keys(this.aliasMap));\n  }\n  hasDefaultCommand() {\n    return !!this.defaultCommand;\n  }\n  runCommand(command, yargs, parsed, commandIndex, helpOnly, helpOrVersionSet) {\n    const commandHandler = this.handlers[command] || this.handlers[this.aliasMap[command]] || this.defaultCommand;\n    const currentContext = yargs.getInternalMethods().getContext();\n    const parentCommands = currentContext.commands.slice();\n    const isDefaultCommand = !command;\n    if (command) {\n      currentContext.commands.push(command);\n      currentContext.fullCommands.push(commandHandler.original);\n    }\n    const builderResult = this.applyBuilderUpdateUsageAndParse(isDefaultCommand, commandHandler, yargs, parsed.aliases, parentCommands, commandIndex, helpOnly, helpOrVersionSet);\n    return isPromise(builderResult) ? builderResult.then(result => this.applyMiddlewareAndGetResult(isDefaultCommand, commandHandler, result.innerArgv, currentContext, helpOnly, result.aliases, yargs)) : this.applyMiddlewareAndGetResult(isDefaultCommand, commandHandler, builderResult.innerArgv, currentContext, helpOnly, builderResult.aliases, yargs);\n  }\n  applyBuilderUpdateUsageAndParse(isDefaultCommand, commandHandler, yargs, aliases, parentCommands, commandIndex, helpOnly, helpOrVersionSet) {\n    const builder = commandHandler.builder;\n    let innerYargs = yargs;\n    if (isCommandBuilderCallback(builder)) {\n      yargs.getInternalMethods().getUsageInstance().freeze();\n      const builderOutput = builder(yargs.getInternalMethods().reset(aliases), helpOrVersionSet);\n      if (isPromise(builderOutput)) {\n        return builderOutput.then(output => {\n          innerYargs = isYargsInstance(output) ? output : yargs;\n          return this.parseAndUpdateUsage(isDefaultCommand, commandHandler, innerYargs, parentCommands, commandIndex, helpOnly);\n        });\n      }\n    } else if (isCommandBuilderOptionDefinitions(builder)) {\n      yargs.getInternalMethods().getUsageInstance().freeze();\n      innerYargs = yargs.getInternalMethods().reset(aliases);\n      Object.keys(commandHandler.builder).forEach(key => {\n        innerYargs.option(key, builder[key]);\n      });\n    }\n    return this.parseAndUpdateUsage(isDefaultCommand, commandHandler, innerYargs, parentCommands, commandIndex, helpOnly);\n  }\n  parseAndUpdateUsage(isDefaultCommand, commandHandler, innerYargs, parentCommands, commandIndex, helpOnly) {\n    if (isDefaultCommand) innerYargs.getInternalMethods().getUsageInstance().unfreeze(true);\n    if (this.shouldUpdateUsage(innerYargs)) {\n      innerYargs.getInternalMethods().getUsageInstance().usage(this.usageFromParentCommandsCommandHandler(parentCommands, commandHandler), commandHandler.description);\n    }\n    const innerArgv = innerYargs.getInternalMethods().runYargsParserAndExecuteCommands(null, undefined, true, commandIndex, helpOnly);\n    return isPromise(innerArgv) ? innerArgv.then(argv => ({\n      aliases: innerYargs.parsed.aliases,\n      innerArgv: argv\n    })) : {\n      aliases: innerYargs.parsed.aliases,\n      innerArgv: innerArgv\n    };\n  }\n  shouldUpdateUsage(yargs) {\n    return !yargs.getInternalMethods().getUsageInstance().getUsageDisabled() && yargs.getInternalMethods().getUsageInstance().getUsage().length === 0;\n  }\n  usageFromParentCommandsCommandHandler(parentCommands, commandHandler) {\n    const c = DEFAULT_MARKER.test(commandHandler.original) ? commandHandler.original.replace(DEFAULT_MARKER, '').trim() : commandHandler.original;\n    const pc = parentCommands.filter(c => {\n      return !DEFAULT_MARKER.test(c);\n    });\n    pc.push(c);\n    return `$0 ${pc.join(' ')}`;\n  }\n  handleValidationAndGetResult(isDefaultCommand, commandHandler, innerArgv, currentContext, aliases, yargs, middlewares, positionalMap) {\n    if (!yargs.getInternalMethods().getHasOutput()) {\n      const validation = yargs.getInternalMethods().runValidation(aliases, positionalMap, yargs.parsed.error, isDefaultCommand);\n      innerArgv = maybeAsyncResult(innerArgv, result => {\n        validation(result);\n        return result;\n      });\n    }\n    if (commandHandler.handler && !yargs.getInternalMethods().getHasOutput()) {\n      yargs.getInternalMethods().setHasOutput();\n      const populateDoubleDash = !!yargs.getOptions().configuration['populate--'];\n      yargs.getInternalMethods().postProcess(innerArgv, populateDoubleDash, false, false);\n      innerArgv = applyMiddleware(innerArgv, yargs, middlewares, false);\n      innerArgv = maybeAsyncResult(innerArgv, result => {\n        const handlerResult = commandHandler.handler(result);\n        return isPromise(handlerResult) ? handlerResult.then(() => result) : result;\n      });\n      if (!isDefaultCommand) {\n        yargs.getInternalMethods().getUsageInstance().cacheHelpMessage();\n      }\n      if (isPromise(innerArgv) && !yargs.getInternalMethods().hasParseCallback()) {\n        innerArgv.catch(error => {\n          try {\n            yargs.getInternalMethods().getUsageInstance().fail(null, error);\n          } catch (_err) {}\n        });\n      }\n    }\n    if (!isDefaultCommand) {\n      currentContext.commands.pop();\n      currentContext.fullCommands.pop();\n    }\n    return innerArgv;\n  }\n  applyMiddlewareAndGetResult(isDefaultCommand, commandHandler, innerArgv, currentContext, helpOnly, aliases, yargs) {\n    let positionalMap = {};\n    if (helpOnly) return innerArgv;\n    if (!yargs.getInternalMethods().getHasOutput()) {\n      positionalMap = this.populatePositionals(commandHandler, innerArgv, currentContext, yargs);\n    }\n    const middlewares = this.globalMiddleware.getMiddleware().slice(0).concat(commandHandler.middlewares);\n    const maybePromiseArgv = applyMiddleware(innerArgv, yargs, middlewares, true);\n    return isPromise(maybePromiseArgv) ? maybePromiseArgv.then(resolvedInnerArgv => this.handleValidationAndGetResult(isDefaultCommand, commandHandler, resolvedInnerArgv, currentContext, aliases, yargs, middlewares, positionalMap)) : this.handleValidationAndGetResult(isDefaultCommand, commandHandler, maybePromiseArgv, currentContext, aliases, yargs, middlewares, positionalMap);\n  }\n  populatePositionals(commandHandler, argv, context, yargs) {\n    argv._ = argv._.slice(context.commands.length);\n    const demanded = commandHandler.demanded.slice(0);\n    const optional = commandHandler.optional.slice(0);\n    const positionalMap = {};\n    this.validation.positionalCount(demanded.length, argv._.length);\n    while (demanded.length) {\n      const demand = demanded.shift();\n      this.populatePositional(demand, argv, positionalMap);\n    }\n    while (optional.length) {\n      const maybe = optional.shift();\n      this.populatePositional(maybe, argv, positionalMap);\n    }\n    argv._ = context.commands.concat(argv._.map(a => '' + a));\n    this.postProcessPositionals(argv, positionalMap, this.cmdToParseOptions(commandHandler.original), yargs);\n    return positionalMap;\n  }\n  populatePositional(positional, argv, positionalMap) {\n    const cmd = positional.cmd[0];\n    if (positional.variadic) {\n      positionalMap[cmd] = argv._.splice(0).map(String);\n    } else {\n      if (argv._.length) positionalMap[cmd] = [String(argv._.shift())];\n    }\n  }\n  cmdToParseOptions(cmdString) {\n    const parseOptions = {\n      array: [],\n      default: {},\n      alias: {},\n      demand: {}\n    };\n    const parsed = parseCommand(cmdString);\n    parsed.demanded.forEach(d => {\n      const [cmd, ...aliases] = d.cmd;\n      if (d.variadic) {\n        parseOptions.array.push(cmd);\n        parseOptions.default[cmd] = [];\n      }\n      parseOptions.alias[cmd] = aliases;\n      parseOptions.demand[cmd] = true;\n    });\n    parsed.optional.forEach(o => {\n      const [cmd, ...aliases] = o.cmd;\n      if (o.variadic) {\n        parseOptions.array.push(cmd);\n        parseOptions.default[cmd] = [];\n      }\n      parseOptions.alias[cmd] = aliases;\n    });\n    return parseOptions;\n  }\n  postProcessPositionals(argv, positionalMap, parseOptions, yargs) {\n    const options = Object.assign({}, yargs.getOptions());\n    options.default = Object.assign(parseOptions.default, options.default);\n    for (const key of Object.keys(parseOptions.alias)) {\n      options.alias[key] = (options.alias[key] || []).concat(parseOptions.alias[key]);\n    }\n    options.array = options.array.concat(parseOptions.array);\n    options.config = {};\n    const unparsed = [];\n    Object.keys(positionalMap).forEach(key => {\n      positionalMap[key].map(value => {\n        if (options.configuration['unknown-options-as-args']) options.key[key] = true;\n        unparsed.push(`--${key}`);\n        unparsed.push(value);\n      });\n    });\n    if (!unparsed.length) return;\n    const config = Object.assign({}, options.configuration, {\n      'populate--': false\n    });\n    const parsed = this.shim.Parser.detailed(unparsed, Object.assign({}, options, {\n      configuration: config\n    }));\n    if (parsed.error) {\n      yargs.getInternalMethods().getUsageInstance().fail(parsed.error.message, parsed.error);\n    } else {\n      const positionalKeys = Object.keys(positionalMap);\n      Object.keys(positionalMap).forEach(key => {\n        positionalKeys.push(...parsed.aliases[key]);\n      });\n      Object.keys(parsed.argv).forEach(key => {\n        if (positionalKeys.includes(key)) {\n          if (!positionalMap[key]) positionalMap[key] = parsed.argv[key];\n          if (!this.isInConfigs(yargs, key) && !this.isDefaulted(yargs, key) && Object.prototype.hasOwnProperty.call(argv, key) && Object.prototype.hasOwnProperty.call(parsed.argv, key) && (Array.isArray(argv[key]) || Array.isArray(parsed.argv[key]))) {\n            argv[key] = [].concat(argv[key], parsed.argv[key]);\n          } else {\n            argv[key] = parsed.argv[key];\n          }\n        }\n      });\n    }\n  }\n  isDefaulted(yargs, key) {\n    const {\n      default: defaults\n    } = yargs.getOptions();\n    return Object.prototype.hasOwnProperty.call(defaults, key) || Object.prototype.hasOwnProperty.call(defaults, this.shim.Parser.camelCase(key));\n  }\n  isInConfigs(yargs, key) {\n    const {\n      configObjects\n    } = yargs.getOptions();\n    return configObjects.some(c => Object.prototype.hasOwnProperty.call(c, key)) || configObjects.some(c => Object.prototype.hasOwnProperty.call(c, this.shim.Parser.camelCase(key)));\n  }\n  runDefaultBuilderOn(yargs) {\n    if (!this.defaultCommand) return;\n    if (this.shouldUpdateUsage(yargs)) {\n      const commandString = DEFAULT_MARKER.test(this.defaultCommand.original) ? this.defaultCommand.original : this.defaultCommand.original.replace(/^[^[\\]<>]*/, '$0 ');\n      yargs.getInternalMethods().getUsageInstance().usage(commandString, this.defaultCommand.description);\n    }\n    const builder = this.defaultCommand.builder;\n    if (isCommandBuilderCallback(builder)) {\n      return builder(yargs, true);\n    } else if (!isCommandBuilderDefinition(builder)) {\n      Object.keys(builder).forEach(key => {\n        yargs.option(key, builder[key]);\n      });\n    }\n    return undefined;\n  }\n  moduleName(obj) {\n    const mod = whichModule(obj);\n    if (!mod) throw new Error(`No command name given for module: ${this.shim.inspect(obj)}`);\n    return this.commandFromFilename(mod.filename);\n  }\n  commandFromFilename(filename) {\n    return this.shim.path.basename(filename, this.shim.path.extname(filename));\n  }\n  extractDesc({\n    describe,\n    description,\n    desc\n  }) {\n    for (const test of [describe, description, desc]) {\n      if (typeof test === 'string' || test === false) return test;\n      assertNotStrictEqual(test, true, this.shim);\n    }\n    return false;\n  }\n  freeze() {\n    this.frozens.push({\n      handlers: this.handlers,\n      aliasMap: this.aliasMap,\n      defaultCommand: this.defaultCommand\n    });\n  }\n  unfreeze() {\n    const frozen = this.frozens.pop();\n    assertNotStrictEqual(frozen, undefined, this.shim);\n    ({\n      handlers: this.handlers,\n      aliasMap: this.aliasMap,\n      defaultCommand: this.defaultCommand\n    } = frozen);\n  }\n  reset() {\n    this.handlers = {};\n    this.aliasMap = {};\n    this.defaultCommand = undefined;\n    this.requireCache = new Set();\n    return this;\n  }\n}\nexport function command(usage, validation, globalMiddleware, shim) {\n  return new CommandInstance(usage, validation, globalMiddleware, shim);\n}\nexport function isCommandBuilderDefinition(builder) {\n  return typeof builder === 'object' && !!builder.builder && typeof builder.handler === 'function';\n}\nfunction isCommandAndAliases(cmd) {\n  return cmd.every(c => typeof c === 'string');\n}\nexport function isCommandBuilderCallback(builder) {\n  return typeof builder === 'function';\n}\nfunction isCommandBuilderOptionDefinitions(builder) {\n  return typeof builder === 'object';\n}\nexport function isCommandHandlerDefinition(cmd) {\n  return typeof cmd === 'object' && !Array.isArray(cmd);\n}","map":{"version":3,"names":["assertNotStrictEqual","isPromise","applyMiddleware","commandMiddlewareFactory","parseCommand","isYargsInstance","maybeAsyncResult","whichModule","DEFAULT_MARKER","CommandInstance","constructor","usage","validation","globalMiddleware","shim","requireCache","Set","handlers","aliasMap","frozens","addDirectory","dir","req","callerFile","opts","recurse","Array","isArray","extensions","parentVisit","visit","o","obj","joined","filename","visited","has","add","addHandler","requireDirectory","require","cmd","description","builder","handler","commandMiddleware","deprecated","aliases","middlewares","isCommandAndAliases","command","isCommandHandlerDefinition","moduleName","concat","extractDesc","isCommandBuilderDefinition","parsedCommand","map","alias","isDefault","parsedAliases","filter","c","test","length","push","slice","replace","forEach","original","demanded","optional","defaultCommand","getCommandHandlers","getCommands","Object","keys","hasDefaultCommand","runCommand","yargs","parsed","commandIndex","helpOnly","helpOrVersionSet","commandHandler","currentContext","getInternalMethods","getContext","parentCommands","commands","isDefaultCommand","fullCommands","builderResult","applyBuilderUpdateUsageAndParse","then","result","applyMiddlewareAndGetResult","innerArgv","innerYargs","isCommandBuilderCallback","getUsageInstance","freeze","builderOutput","reset","output","parseAndUpdateUsage","isCommandBuilderOptionDefinitions","key","option","unfreeze","shouldUpdateUsage","usageFromParentCommandsCommandHandler","runYargsParserAndExecuteCommands","undefined","argv","getUsageDisabled","getUsage","trim","pc","join","handleValidationAndGetResult","positionalMap","getHasOutput","runValidation","error","setHasOutput","populateDoubleDash","getOptions","configuration","postProcess","handlerResult","cacheHelpMessage","hasParseCallback","catch","fail","_err","pop","populatePositionals","getMiddleware","maybePromiseArgv","resolvedInnerArgv","context","_","positionalCount","demand","shift","populatePositional","maybe","a","postProcessPositionals","cmdToParseOptions","positional","variadic","splice","String","cmdString","parseOptions","array","default","d","options","assign","config","unparsed","value","Parser","detailed","message","positionalKeys","includes","isInConfigs","isDefaulted","prototype","hasOwnProperty","call","defaults","camelCase","configObjects","some","runDefaultBuilderOn","commandString","mod","Error","inspect","commandFromFilename","path","basename","extname","describe","desc","frozen","every"],"sources":["/Users/kseniavoronova/today-i-learned-react/node_modules/yargs/build/lib/command.js"],"sourcesContent":["import { assertNotStrictEqual, } from './typings/common-types.js';\nimport { isPromise } from './utils/is-promise.js';\nimport { applyMiddleware, commandMiddlewareFactory, } from './middleware.js';\nimport { parseCommand } from './parse-command.js';\nimport { isYargsInstance, } from './yargs-factory.js';\nimport { maybeAsyncResult } from './utils/maybe-async-result.js';\nimport whichModule from './utils/which-module.js';\nconst DEFAULT_MARKER = /(^\\*)|(^\\$0)/;\nexport class CommandInstance {\n    constructor(usage, validation, globalMiddleware, shim) {\n        this.requireCache = new Set();\n        this.handlers = {};\n        this.aliasMap = {};\n        this.frozens = [];\n        this.shim = shim;\n        this.usage = usage;\n        this.globalMiddleware = globalMiddleware;\n        this.validation = validation;\n    }\n    addDirectory(dir, req, callerFile, opts) {\n        opts = opts || {};\n        if (typeof opts.recurse !== 'boolean')\n            opts.recurse = false;\n        if (!Array.isArray(opts.extensions))\n            opts.extensions = ['js'];\n        const parentVisit = typeof opts.visit === 'function' ? opts.visit : (o) => o;\n        opts.visit = (obj, joined, filename) => {\n            const visited = parentVisit(obj, joined, filename);\n            if (visited) {\n                if (this.requireCache.has(joined))\n                    return visited;\n                else\n                    this.requireCache.add(joined);\n                this.addHandler(visited);\n            }\n            return visited;\n        };\n        this.shim.requireDirectory({ require: req, filename: callerFile }, dir, opts);\n    }\n    addHandler(cmd, description, builder, handler, commandMiddleware, deprecated) {\n        let aliases = [];\n        const middlewares = commandMiddlewareFactory(commandMiddleware);\n        handler = handler || (() => { });\n        if (Array.isArray(cmd)) {\n            if (isCommandAndAliases(cmd)) {\n                [cmd, ...aliases] = cmd;\n            }\n            else {\n                for (const command of cmd) {\n                    this.addHandler(command);\n                }\n            }\n        }\n        else if (isCommandHandlerDefinition(cmd)) {\n            let command = Array.isArray(cmd.command) || typeof cmd.command === 'string'\n                ? cmd.command\n                : this.moduleName(cmd);\n            if (cmd.aliases)\n                command = [].concat(command).concat(cmd.aliases);\n            this.addHandler(command, this.extractDesc(cmd), cmd.builder, cmd.handler, cmd.middlewares, cmd.deprecated);\n            return;\n        }\n        else if (isCommandBuilderDefinition(builder)) {\n            this.addHandler([cmd].concat(aliases), description, builder.builder, builder.handler, builder.middlewares, builder.deprecated);\n            return;\n        }\n        if (typeof cmd === 'string') {\n            const parsedCommand = parseCommand(cmd);\n            aliases = aliases.map(alias => parseCommand(alias).cmd);\n            let isDefault = false;\n            const parsedAliases = [parsedCommand.cmd].concat(aliases).filter(c => {\n                if (DEFAULT_MARKER.test(c)) {\n                    isDefault = true;\n                    return false;\n                }\n                return true;\n            });\n            if (parsedAliases.length === 0 && isDefault)\n                parsedAliases.push('$0');\n            if (isDefault) {\n                parsedCommand.cmd = parsedAliases[0];\n                aliases = parsedAliases.slice(1);\n                cmd = cmd.replace(DEFAULT_MARKER, parsedCommand.cmd);\n            }\n            aliases.forEach(alias => {\n                this.aliasMap[alias] = parsedCommand.cmd;\n            });\n            if (description !== false) {\n                this.usage.command(cmd, description, isDefault, aliases, deprecated);\n            }\n            this.handlers[parsedCommand.cmd] = {\n                original: cmd,\n                description,\n                handler,\n                builder: builder || {},\n                middlewares,\n                deprecated,\n                demanded: parsedCommand.demanded,\n                optional: parsedCommand.optional,\n            };\n            if (isDefault)\n                this.defaultCommand = this.handlers[parsedCommand.cmd];\n        }\n    }\n    getCommandHandlers() {\n        return this.handlers;\n    }\n    getCommands() {\n        return Object.keys(this.handlers).concat(Object.keys(this.aliasMap));\n    }\n    hasDefaultCommand() {\n        return !!this.defaultCommand;\n    }\n    runCommand(command, yargs, parsed, commandIndex, helpOnly, helpOrVersionSet) {\n        const commandHandler = this.handlers[command] ||\n            this.handlers[this.aliasMap[command]] ||\n            this.defaultCommand;\n        const currentContext = yargs.getInternalMethods().getContext();\n        const parentCommands = currentContext.commands.slice();\n        const isDefaultCommand = !command;\n        if (command) {\n            currentContext.commands.push(command);\n            currentContext.fullCommands.push(commandHandler.original);\n        }\n        const builderResult = this.applyBuilderUpdateUsageAndParse(isDefaultCommand, commandHandler, yargs, parsed.aliases, parentCommands, commandIndex, helpOnly, helpOrVersionSet);\n        return isPromise(builderResult)\n            ? builderResult.then(result => this.applyMiddlewareAndGetResult(isDefaultCommand, commandHandler, result.innerArgv, currentContext, helpOnly, result.aliases, yargs))\n            : this.applyMiddlewareAndGetResult(isDefaultCommand, commandHandler, builderResult.innerArgv, currentContext, helpOnly, builderResult.aliases, yargs);\n    }\n    applyBuilderUpdateUsageAndParse(isDefaultCommand, commandHandler, yargs, aliases, parentCommands, commandIndex, helpOnly, helpOrVersionSet) {\n        const builder = commandHandler.builder;\n        let innerYargs = yargs;\n        if (isCommandBuilderCallback(builder)) {\n            yargs.getInternalMethods().getUsageInstance().freeze();\n            const builderOutput = builder(yargs.getInternalMethods().reset(aliases), helpOrVersionSet);\n            if (isPromise(builderOutput)) {\n                return builderOutput.then(output => {\n                    innerYargs = isYargsInstance(output) ? output : yargs;\n                    return this.parseAndUpdateUsage(isDefaultCommand, commandHandler, innerYargs, parentCommands, commandIndex, helpOnly);\n                });\n            }\n        }\n        else if (isCommandBuilderOptionDefinitions(builder)) {\n            yargs.getInternalMethods().getUsageInstance().freeze();\n            innerYargs = yargs.getInternalMethods().reset(aliases);\n            Object.keys(commandHandler.builder).forEach(key => {\n                innerYargs.option(key, builder[key]);\n            });\n        }\n        return this.parseAndUpdateUsage(isDefaultCommand, commandHandler, innerYargs, parentCommands, commandIndex, helpOnly);\n    }\n    parseAndUpdateUsage(isDefaultCommand, commandHandler, innerYargs, parentCommands, commandIndex, helpOnly) {\n        if (isDefaultCommand)\n            innerYargs.getInternalMethods().getUsageInstance().unfreeze(true);\n        if (this.shouldUpdateUsage(innerYargs)) {\n            innerYargs\n                .getInternalMethods()\n                .getUsageInstance()\n                .usage(this.usageFromParentCommandsCommandHandler(parentCommands, commandHandler), commandHandler.description);\n        }\n        const innerArgv = innerYargs\n            .getInternalMethods()\n            .runYargsParserAndExecuteCommands(null, undefined, true, commandIndex, helpOnly);\n        return isPromise(innerArgv)\n            ? innerArgv.then(argv => ({\n                aliases: innerYargs.parsed.aliases,\n                innerArgv: argv,\n            }))\n            : {\n                aliases: innerYargs.parsed.aliases,\n                innerArgv: innerArgv,\n            };\n    }\n    shouldUpdateUsage(yargs) {\n        return (!yargs.getInternalMethods().getUsageInstance().getUsageDisabled() &&\n            yargs.getInternalMethods().getUsageInstance().getUsage().length === 0);\n    }\n    usageFromParentCommandsCommandHandler(parentCommands, commandHandler) {\n        const c = DEFAULT_MARKER.test(commandHandler.original)\n            ? commandHandler.original.replace(DEFAULT_MARKER, '').trim()\n            : commandHandler.original;\n        const pc = parentCommands.filter(c => {\n            return !DEFAULT_MARKER.test(c);\n        });\n        pc.push(c);\n        return `$0 ${pc.join(' ')}`;\n    }\n    handleValidationAndGetResult(isDefaultCommand, commandHandler, innerArgv, currentContext, aliases, yargs, middlewares, positionalMap) {\n        if (!yargs.getInternalMethods().getHasOutput()) {\n            const validation = yargs\n                .getInternalMethods()\n                .runValidation(aliases, positionalMap, yargs.parsed.error, isDefaultCommand);\n            innerArgv = maybeAsyncResult(innerArgv, result => {\n                validation(result);\n                return result;\n            });\n        }\n        if (commandHandler.handler && !yargs.getInternalMethods().getHasOutput()) {\n            yargs.getInternalMethods().setHasOutput();\n            const populateDoubleDash = !!yargs.getOptions().configuration['populate--'];\n            yargs\n                .getInternalMethods()\n                .postProcess(innerArgv, populateDoubleDash, false, false);\n            innerArgv = applyMiddleware(innerArgv, yargs, middlewares, false);\n            innerArgv = maybeAsyncResult(innerArgv, result => {\n                const handlerResult = commandHandler.handler(result);\n                return isPromise(handlerResult)\n                    ? handlerResult.then(() => result)\n                    : result;\n            });\n            if (!isDefaultCommand) {\n                yargs.getInternalMethods().getUsageInstance().cacheHelpMessage();\n            }\n            if (isPromise(innerArgv) &&\n                !yargs.getInternalMethods().hasParseCallback()) {\n                innerArgv.catch(error => {\n                    try {\n                        yargs.getInternalMethods().getUsageInstance().fail(null, error);\n                    }\n                    catch (_err) {\n                    }\n                });\n            }\n        }\n        if (!isDefaultCommand) {\n            currentContext.commands.pop();\n            currentContext.fullCommands.pop();\n        }\n        return innerArgv;\n    }\n    applyMiddlewareAndGetResult(isDefaultCommand, commandHandler, innerArgv, currentContext, helpOnly, aliases, yargs) {\n        let positionalMap = {};\n        if (helpOnly)\n            return innerArgv;\n        if (!yargs.getInternalMethods().getHasOutput()) {\n            positionalMap = this.populatePositionals(commandHandler, innerArgv, currentContext, yargs);\n        }\n        const middlewares = this.globalMiddleware\n            .getMiddleware()\n            .slice(0)\n            .concat(commandHandler.middlewares);\n        const maybePromiseArgv = applyMiddleware(innerArgv, yargs, middlewares, true);\n        return isPromise(maybePromiseArgv)\n            ? maybePromiseArgv.then(resolvedInnerArgv => this.handleValidationAndGetResult(isDefaultCommand, commandHandler, resolvedInnerArgv, currentContext, aliases, yargs, middlewares, positionalMap))\n            : this.handleValidationAndGetResult(isDefaultCommand, commandHandler, maybePromiseArgv, currentContext, aliases, yargs, middlewares, positionalMap);\n    }\n    populatePositionals(commandHandler, argv, context, yargs) {\n        argv._ = argv._.slice(context.commands.length);\n        const demanded = commandHandler.demanded.slice(0);\n        const optional = commandHandler.optional.slice(0);\n        const positionalMap = {};\n        this.validation.positionalCount(demanded.length, argv._.length);\n        while (demanded.length) {\n            const demand = demanded.shift();\n            this.populatePositional(demand, argv, positionalMap);\n        }\n        while (optional.length) {\n            const maybe = optional.shift();\n            this.populatePositional(maybe, argv, positionalMap);\n        }\n        argv._ = context.commands.concat(argv._.map(a => '' + a));\n        this.postProcessPositionals(argv, positionalMap, this.cmdToParseOptions(commandHandler.original), yargs);\n        return positionalMap;\n    }\n    populatePositional(positional, argv, positionalMap) {\n        const cmd = positional.cmd[0];\n        if (positional.variadic) {\n            positionalMap[cmd] = argv._.splice(0).map(String);\n        }\n        else {\n            if (argv._.length)\n                positionalMap[cmd] = [String(argv._.shift())];\n        }\n    }\n    cmdToParseOptions(cmdString) {\n        const parseOptions = {\n            array: [],\n            default: {},\n            alias: {},\n            demand: {},\n        };\n        const parsed = parseCommand(cmdString);\n        parsed.demanded.forEach(d => {\n            const [cmd, ...aliases] = d.cmd;\n            if (d.variadic) {\n                parseOptions.array.push(cmd);\n                parseOptions.default[cmd] = [];\n            }\n            parseOptions.alias[cmd] = aliases;\n            parseOptions.demand[cmd] = true;\n        });\n        parsed.optional.forEach(o => {\n            const [cmd, ...aliases] = o.cmd;\n            if (o.variadic) {\n                parseOptions.array.push(cmd);\n                parseOptions.default[cmd] = [];\n            }\n            parseOptions.alias[cmd] = aliases;\n        });\n        return parseOptions;\n    }\n    postProcessPositionals(argv, positionalMap, parseOptions, yargs) {\n        const options = Object.assign({}, yargs.getOptions());\n        options.default = Object.assign(parseOptions.default, options.default);\n        for (const key of Object.keys(parseOptions.alias)) {\n            options.alias[key] = (options.alias[key] || []).concat(parseOptions.alias[key]);\n        }\n        options.array = options.array.concat(parseOptions.array);\n        options.config = {};\n        const unparsed = [];\n        Object.keys(positionalMap).forEach(key => {\n            positionalMap[key].map(value => {\n                if (options.configuration['unknown-options-as-args'])\n                    options.key[key] = true;\n                unparsed.push(`--${key}`);\n                unparsed.push(value);\n            });\n        });\n        if (!unparsed.length)\n            return;\n        const config = Object.assign({}, options.configuration, {\n            'populate--': false,\n        });\n        const parsed = this.shim.Parser.detailed(unparsed, Object.assign({}, options, {\n            configuration: config,\n        }));\n        if (parsed.error) {\n            yargs\n                .getInternalMethods()\n                .getUsageInstance()\n                .fail(parsed.error.message, parsed.error);\n        }\n        else {\n            const positionalKeys = Object.keys(positionalMap);\n            Object.keys(positionalMap).forEach(key => {\n                positionalKeys.push(...parsed.aliases[key]);\n            });\n            Object.keys(parsed.argv).forEach(key => {\n                if (positionalKeys.includes(key)) {\n                    if (!positionalMap[key])\n                        positionalMap[key] = parsed.argv[key];\n                    if (!this.isInConfigs(yargs, key) &&\n                        !this.isDefaulted(yargs, key) &&\n                        Object.prototype.hasOwnProperty.call(argv, key) &&\n                        Object.prototype.hasOwnProperty.call(parsed.argv, key) &&\n                        (Array.isArray(argv[key]) || Array.isArray(parsed.argv[key]))) {\n                        argv[key] = [].concat(argv[key], parsed.argv[key]);\n                    }\n                    else {\n                        argv[key] = parsed.argv[key];\n                    }\n                }\n            });\n        }\n    }\n    isDefaulted(yargs, key) {\n        const { default: defaults } = yargs.getOptions();\n        return (Object.prototype.hasOwnProperty.call(defaults, key) ||\n            Object.prototype.hasOwnProperty.call(defaults, this.shim.Parser.camelCase(key)));\n    }\n    isInConfigs(yargs, key) {\n        const { configObjects } = yargs.getOptions();\n        return (configObjects.some(c => Object.prototype.hasOwnProperty.call(c, key)) ||\n            configObjects.some(c => Object.prototype.hasOwnProperty.call(c, this.shim.Parser.camelCase(key))));\n    }\n    runDefaultBuilderOn(yargs) {\n        if (!this.defaultCommand)\n            return;\n        if (this.shouldUpdateUsage(yargs)) {\n            const commandString = DEFAULT_MARKER.test(this.defaultCommand.original)\n                ? this.defaultCommand.original\n                : this.defaultCommand.original.replace(/^[^[\\]<>]*/, '$0 ');\n            yargs\n                .getInternalMethods()\n                .getUsageInstance()\n                .usage(commandString, this.defaultCommand.description);\n        }\n        const builder = this.defaultCommand.builder;\n        if (isCommandBuilderCallback(builder)) {\n            return builder(yargs, true);\n        }\n        else if (!isCommandBuilderDefinition(builder)) {\n            Object.keys(builder).forEach(key => {\n                yargs.option(key, builder[key]);\n            });\n        }\n        return undefined;\n    }\n    moduleName(obj) {\n        const mod = whichModule(obj);\n        if (!mod)\n            throw new Error(`No command name given for module: ${this.shim.inspect(obj)}`);\n        return this.commandFromFilename(mod.filename);\n    }\n    commandFromFilename(filename) {\n        return this.shim.path.basename(filename, this.shim.path.extname(filename));\n    }\n    extractDesc({ describe, description, desc }) {\n        for (const test of [describe, description, desc]) {\n            if (typeof test === 'string' || test === false)\n                return test;\n            assertNotStrictEqual(test, true, this.shim);\n        }\n        return false;\n    }\n    freeze() {\n        this.frozens.push({\n            handlers: this.handlers,\n            aliasMap: this.aliasMap,\n            defaultCommand: this.defaultCommand,\n        });\n    }\n    unfreeze() {\n        const frozen = this.frozens.pop();\n        assertNotStrictEqual(frozen, undefined, this.shim);\n        ({\n            handlers: this.handlers,\n            aliasMap: this.aliasMap,\n            defaultCommand: this.defaultCommand,\n        } = frozen);\n    }\n    reset() {\n        this.handlers = {};\n        this.aliasMap = {};\n        this.defaultCommand = undefined;\n        this.requireCache = new Set();\n        return this;\n    }\n}\nexport function command(usage, validation, globalMiddleware, shim) {\n    return new CommandInstance(usage, validation, globalMiddleware, shim);\n}\nexport function isCommandBuilderDefinition(builder) {\n    return (typeof builder === 'object' &&\n        !!builder.builder &&\n        typeof builder.handler === 'function');\n}\nfunction isCommandAndAliases(cmd) {\n    return cmd.every(c => typeof c === 'string');\n}\nexport function isCommandBuilderCallback(builder) {\n    return typeof builder === 'function';\n}\nfunction isCommandBuilderOptionDefinitions(builder) {\n    return typeof builder === 'object';\n}\nexport function isCommandHandlerDefinition(cmd) {\n    return typeof cmd === 'object' && !Array.isArray(cmd);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}